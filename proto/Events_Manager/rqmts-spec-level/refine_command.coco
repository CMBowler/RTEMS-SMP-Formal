# SPDX-License-Identifier: BSD-2-Clause
"""Converts Annotated SPIN counter-examples to program test code"""

# Copyright (C) 2019-2021 Trinity College Dublin (www.tcd.ie)
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import itertools
import logging

logger = logging.getLogger (__name__)

outputLOG = False
annoteComments = True
outputSWITCH = False


class command:

    def __init__(self, ref_dict):
        self.ref_dict = ref_dict
        self.ref_dict_keys = ref_dict.keys()

        self.inSTRUCT = False  # True when in STRUCT
        self.inSEQ = False  # True when in SEQ
        self.seqForSEQ = "" # Holds space-separated sequence output string when in SEQ
        self.inName = ""     # Set to SEQ/STRUCT name when inside

        self.testName = "Un-named Test"
        self.defCode = []     # list of strings
        self.declCode = []    # list of strings
        self.testCodes = []   # list (indexed by pid) of list of strings
        self.procIds = set()  # set of process ids in use
        self.currentId = 0    # currently running process
        self.switchNo = 0

    def collectPIds(self, ln):
        if len(ln) > 0:
            self.procIds.add(int(ln[0]))
        else:
            skip

    def addCode(self, id,codelines):
        # logger.debug("addCode lines are {} {}".format(type(codelines),codelines))
        self.testCodes = self.testCodes + [(int(id), codelines)]

    def switchIfRequired(self, ln):
        pid = ln[0]
        i = int(pid)
        if i == self.currentId:
            pass
        else: # proc self.currentId stops here, and proc i resumes
            self.switchNo =self.switchNo+1
            if 'SUSPEND' not in self.ref_dict_keys:
                self.addCode(pid,["// SUSPEND: no refinement entry found"])
            else:
                code = self.ref_dict['SUSPEND']
                self.addCode(self.currentId,[code.format(self.switchNo,self.currentId,i)])
            if 'WAKEUP' not in self.ref_dict_keys:
                self.addCode(pid,["// WAKEUP: no refinement entry found"])
            else:
                code = self.ref_dict['WAKEUP']
                self.addCode(i,[code.format(self.switchNo,i,self.currentId)])
            self.currentId = i

    def logSPINLine(self, ln):
        pid = int(ln[0])
        str = ' '.join(ln)
        if ln[1] in ['NAME','DEF']:
            self.defCode = self.defCode + ["// @@@ {}".format(str)]
        elif ln[1] in ['DECL','DCLARRAY'] :
            self.declCode = self.declCode + ["// @@@ {}".format(str)]
        elif ln[1] == 'LOG' :
            pass
        else:
            self.addCode(pid,['T_log(T_NORMAL,"@@@ {}");'.format(str)])

    # Promela Annotations
    #
    # Format: `@@@ <pid> <KEYWORD> <thing1> ... <thingN>` where N >= 0
    #
    # Things:
    #  <pid>  Promela Process Id of proctype generating annotation
    #  <word> chunk of text containing no white space
    #  <name> Promela variable/structure/constant identifier
    #  <type> Promela type identifier
    #  <tid>  OS Task/Thread/Process Id alias
    #  _  unused argument (within containers)
    #
    # KEYWORDS and "things"
    # LOG <word1> ... <wordN>
    # NAME <name>
    # INIT
    # DEF <name> <value>
    # DECL <type> <name> [<value>]
    # DCLARRAY <type> <name> <value>
    # TASK <name>
    # SIGNAL <name> <value>
    # WAIT   <name> <value>
    # STATE tid <name>
    # SCALAR (<name>|_) [<index>] <value>
    # PTR <name> <value>
    # STRUCT <name>
    # SEQ <name>
    # END <name>
    # CALL <name> <value1> ... <valueN>

    # Refinement Mechanisms
    #   Direct Output - no lookup
    #   Keyword Refinement - lookup (the) <KEYWORD>
    #   Name Refinement - lookup (first) name
    #    The same name may appear in different contexts
    #    We add '_XXX' suffixes to lookup less frequent uses
    #     _DCL - A variable declaration
    #     _PTR - The pointer value itself
    #     _FSCALAR - A scalar that is a struct field
    #     _FPTR - A pointer that is a struct field
    #   Type Refinement - lookup (first) type
    #   Typed-Name Refinement - lookup type-name

    # LOG <word1> ... <wordN>
    #  Direct Output
    match def refineSPINLine(self, [pid,'LOG']+rest):
        global outputLOG
        if outputLOG:
            ln = ' '.join(rest)
            self.addCode(pid,["T_log(T_NORMAL,{});".format(ln)])
        else:
            pass

    # NAME <name>
    #  Keyword Refinement (NAME)
    addpattern def refineSPINLine(self, [pid,'NAME',name]):
        if 'NAME' not in self.ref_dict_keys:
            self.addCode(pid,["// CANNOT REFINE 'NAME'"])
        else:
            self.addCode(pid,self.ref_dict["NAME"].rsplit('\n'))

    # INIT
    #   Keyword Refinement (INIT)
    addpattern def refineSPINLine(self, [pid,'INIT']):
        if 'INIT' not in self.ref_dict_keys:
            self.addCode(pid,["// CANNOT REFINE 'INIT'"])
        else:
            self.addCode(pid,self.ref_dict["INIT"].rsplit('\n'))

    # TASK <name>
    #  Name Refinement (<name>)
    addpattern def refineSPINLine(self, [pid,'TASK',task_name]):
        if task_name not in self.ref_dict_keys:
            self.addCode(pid,["// CANNOT REFINE TASK {}".format(task_name)])
        else:
            self.addCode(pid,self.ref_dict[task_name].rsplit('\n'))

    # SIGNAL <value>
    #   Keyword Refinement (SIGNAL)
    addpattern def refineSPINLine(self, [pid,'SIGNAL',value]):
        if 'SIGNAL' not in self.ref_dict_keys:
            self.addCode(pid,["// CANNOT REFINE SIGNAL {}".format(name)])
        else:
            self.addCode(pid,self.ref_dict['SIGNAL'].format(value).rsplit('\n'))

    # WAIT <value>
    #   Keyword Refinement (WAIT)
    addpattern def refineSPINLine(self, [pid,'WAIT',value]):
        if 'WAIT' not in self.ref_dict_keys:
            self.addCode(pid,["// CANNOT REFINE WAIT {}".format(value)])
        else:
            self.addCode(pid,self.ref_dict['WAIT'].format(value).rsplit('\n'))

    # DEF <name> <value>
    #   Direct Output
    addpattern def refineSPINLine(self, [pid,'DEF',name,value]):
        self.defCode = self.defCode + [' '.join(['#define',name,value])]

    # DECL <type> <name> [<value>]
    #   Name Refinement (<name>_DCL)
    #   add with 'static' to declCode if pid==0,
    #   add without 'static' using addCode, otherwise
    addpattern def refineSPINLine(self, [pid,'DECL',typ,name]+rest):
        logger.debug("Processing DECL {} {} {}".format(type,name,rest))
        name_dcl = name + '_DCL'
        if name_dcl not in self.ref_dict_keys:
            decl = "// CANNOT REFINE Decl {}".format(name_dcl)
        else:
            decl = ' '.join([self.ref_dict[name_dcl],name])
        if len(rest) > 0:
            decl = decl + " = " + rest[0] + ";"
        else:
            decl = decl + ";"
        if int(pid) == 0:
            decl = 'static ' + decl
            self.declCode = self.declCode + [decl]
        else:
            self.addCode(pid,[decl])

    # DCLARRAY <type> <name> <value>
    #   Name Refinement (<name>_DCL)
    #   add with 'static' to declCode if pid==0,
    #   add without 'static' using addCode, otherwise
    addpattern def refineSPINLine(self, [pid,'DCLARRAY',typ,name,value]):
        logger.debug("Processing DECLARRAY {} {} {}".format(type,name,value))
        name_dcl = name + '_DCL'
        if name_dcl not in self.ref_dict_keys:
            dclarray = ["// DCLARRAY: no refinement entry for '{}'".format(name_dcl)]
        else:
            code = self.ref_dict[name_dcl].format(name,value)
            if int(pid) == 0:
                code = 'static ' + code
            dclarray = code.rsplit('\n')
        if int(pid) == 0:
            self.declCode = self.declCode + dclarray
        else:
            self.addCode(pid,dclarray)

    # PTR <name> <value>
    #   Name (_PTR/_FPTR) refinement
    addpattern def refineSPINLine(self, [pid,'PTR',name,value]):
        i = int(pid)
        if not self.inSTRUCT:
            pname = name + '_PTR'
            if pname not in self.ref_dict_keys:
                self.addCode(pid,["// PTR: no refinement entry for '{}'".format(pname)])
            else:
                pcode = self.ref_dict[pname].rsplit('\n')
                if eval(value) == 0:
                    self.addCode(pid,[pcode[0]])
                else:
                    self.addCode(pid,[pcode[1].format(value)])
        else:
            pname = name + '_FPTR'
            if pname not in self.ref_dict_keys:
                self.addCode(pid,["// PTR(field): no refinement for '{}'".format(pname)])
            else:
                pcode = self.ref_dict[pname].rsplit('\n')
                if eval(value) == 0:
                    self.addCode(pid,[pcode[0].format(self.inName)])
                else:
                    self.addCode(pid,[pcode[1].format(self.inName,value)])

    # CALL <name> <value0> .. <valueN>
    # Name refinement
    addpattern def refineSPINLine(self, [pid,'CALL',name]+rest):
        logger.debug("Processing CALL {} {}".format(name,rest))
        if name not in self.ref_dict_keys:
            logger.debug("CALL name not found")
            self.addCode(pid,["// CALL: no refinement entry for '{}'".format(name)])
        else:
            code = self.ref_dict[name]
            logger.debug("CALL code: {}".format(code))
            case len(rest):
                match 0: callcode = code.rsplit('\n')
                match 1: callcode = (code.format(rest[0])).rsplit('\n')
                match 2: callcode = (code.format(rest[0],rest[1])).rsplit('\n')
                match 3: callcode = (code.format(rest[0],rest[1],rest[2])).rsplit('\n')
                match 4: callcode = (code.format(rest[0],rest[1]
                                       ,rest[2],rest[3])).rsplit('\n')
                match 5: callcode = (code.format(rest[0],rest[1]
                                       ,rest[2],rest[3],rest[4])).rsplit('\n')
                match 6: callcode = (code.format(rest[0],rest[1]
                                       ,rest[2],rest[3],rest[4],rest[5])).rsplit('\n')
            else:
                callcode = ["// CALL: can't handle > 6 arguments"]
            self.addCode(pid,callcode)
        logger.debug("CALL complete")

    # STRUCT <name>
    addpattern def refineSPINLine(self, [pid,'STRUCT',name]):
        self.inSTRUCT = True # should check not already inside anything!
        self.inName = name

    # SEQ <name>
    addpattern def refineSPINLine(self, [pid,'SEQ',name]):
        self.inSEQ = True # should check not already inside anything!
        self.seqForSEQ = ""
        self.inName = name

    # END <name>
    addpattern def refineSPINLine(self, [pid,'END',name]):
        if self.inSTRUCT:
            self.inSTRUCT = False
        if self.inSEQ:
            seqName = name + "_SEQ"
            if seqName not in self.ref_dict_keys:
                self.addCode(pid,["SEQ END: no refinement for ".format(seqName)])
            else:
                codelines = self.ref_dict[seqName].rsplit('\n')
                for code in codelines:
                    self.addCode(pid,[code.format(self.seqForSEQ)])
            self.inSEQ = False
            self.seqForSEQ = ""
        self.inName = ""

    # SCALAR _ <value>
    addpattern def refineSPINLine(self, [pid,'SCALAR','_',value]):
        # should only be used inside SEQ
        self.seqForSEQ = self.seqForSEQ + " " + value

    # SCALAR <name/field> <value>
    # Name (<name>/_FSCALAR) Refinement
    addpattern def refineSPINLine(self, [pid,'SCALAR',name,value]):
        # should not be used inside SEQ
        if not self.inSTRUCT:
            if name not in self.ref_dict_keys:
                self.addCode(pid,["// SCALAR: no refinement entry for '{}'".format(name)])
            else:
                code = self.ref_dict[name]
                self.addCode(pid,(code.format(value)).rsplit('\n'))
        else:
            field = name + "_FSCALAR"
            if field not in self.ref_dict_keys:
                self.addCode(pid,["// SCALAR(field): no refinement entry for '{}'".format(field)])
            else:
                code = self.ref_dict[field]
                self.addCode(pid,[code.format(self.inName,value)])

    # SCALAR <name> <index> <value>
    # Name (<name>/_FSCALAR) Refinement
    addpattern def refineSPINLine(self, [pid,'SCALAR',name,index,value]):
        # should not be used inside SEQ
        if not self.inSTRUCT:
            if name not in self.ref_dict_keys:
                self.addCode(pid,["// SCALAR-3: no refinement entry for '{}'".format(name)])
            else:
                code = self.ref_dict[name]
                self.addCode(pid,code.format(index,value).rsplit('\n'))
        else:
            field = name + "_FSCALAR"
            if field not in self.ref_dict_keys:
                self.addCode(pid,["// SCALAR(field): no refinement entry for '{}'".format(field)])
            else:
                code = self.ref_dict[field]
                self.addCode(pid,[code.format(self.inName,value)])

    # STATE <tid> <name>
    # Name Refinement
    addpattern def refineSPINLine(self, [pid,'STATE',tid,state]):
        if state not in self.ref_dict_keys:
            self.addCode(pid,["// STATE: no refinement entry for '{}'".format(state)])
        else:
            code = self.ref_dict[state]
            self.addCode(pid,[code.format(tid)])


    # catch-all for refineSPINLine
    @addpattern(refineSPINLine)
    match def refineSPINLine(self, [pid,hd]+rest):
        dunno = "/* DON'T KNOW HOW TO REFINE: "+pid+" '"+str(hd)+"' */"
        self.addCode(pid, [dunno])

    @addpattern(refineSPINLine)
    match def refineSPINLine(self, []):
        pass

    def refineSPINLine_main(self, ln):
        global annoteComments, outputSWITCH
        self.collectPIds(ln)
        if outputSWITCH:
            self.switchIfRequired(ln)
        else:
            pass
        if annoteComments:
             self.logSPINLine(ln)
        else:
            pass
        self.refineSPINLine(ln)

    def test_body (self):
        yield "\n/* =============================================== */\n\n"


        for line in self.defCode:
            yield line+"\n"


        for line in self.declCode:
            yield line+"\n"

        def testseg_name (segno): return "TestSegment{}".format(segno)
        def get_id (id_codes): return id_codes[0]

        for sno, lines in itertools.groupby (sorted (self.testCodes, key = get_id), get_id):
            yield "\n/* ===== TEST CODE SEGMENT {} =====*/\n\n".format(sno)
            testseg = "static void {}( Context* ctx )".format(testseg_name sno)
            yield "{} {}\n".format(testseg, "{")

            for lines0 in lines:
                for line in lines0[1]:
                    yield "  "+line+"\n"

            yield "}\n"

        # yield "\nT_TEST_CASE( {} )".format(self.testName)
        # yield " {\n"
        # if len self.procIds == 1:
        #     yield "  {}();\n".format(testseg_name (segno - 1))
        # else:
        #     yield "  TO BE DONE, TO SETUP SYNC/SCHEDULING AND INVOKE Tasks\n"
        # yield "}\n"
        #
        # testWrapup = [ '\nstatic void Init( rtems_task_argument arg )'
        #              , '{'
        #              , '   T_run_initialize( &config );'
        #              , '   T_register();'
        #              , '   T_run_by_name( "{}" );'.format(self.testName)
        #              , '}'
        # ]
        #
        # for line in testWrapup:
        #     yield line+"\n"

        yield "\n/* =============================================== */\n\n"
