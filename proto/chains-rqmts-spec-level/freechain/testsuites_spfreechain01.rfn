/*@

export_code \<open>init.c\<close>

enclose_file \<open>enclose_1_head.c\<close>
             \<open>enclose_2_foot.c\<close>

export_input_yaml \<open>_\<close>
export_input_only_content

refine_uniform_log

refine_uniform_at \<open>head_add\<close>
           \<open>
    #refine x0 \<^promela>\<open>x\<close>
    node = _Freechain_Get(&fc0, malloc, 1, sizeof(test_node));
    node->x = x0;
    _Freechain_Put(&fc, node);\<close>

refine_uniform_at \<open>head_del\<close>
           \<open>
    node = _Freechain_Get(&fc, malloc, 1, sizeof(test_node));\<close>

refine_uniform_at \<open>tail_add\<close>
           \<open>
    #refine x0 \<^promela>\<open>x\<close>
    node = _Freechain_Get(&fc0, malloc, 1, sizeof(test_node));
    node->x = x0;
    _Freechain_Put(&fc, node);\<close>

refine_uniform_at \<open>tail_del\<close>
           \<open>
    node = _Freechain_Get(&fc, malloc, 1, sizeof(test_node));\<close>

no_printf_at \<open>init_simple\<close>

*/

// ltl progress_one_exec_in_history {(! history_op?[op_del] && ! history_op?[op_add]) U (history_op?[op_del] || history_op?[op_add])}
init {
  assert (0 == 0);
}
ltl progress_one_elem_in_queue {true U (q_size_current != 0)}
// ltl max_filling_then_never_del {(q_size_current != 4) W (q_size_current == 4)}

/*@
refine_uniform_at \<open>progress_one_elem_in_queue\<close>
           \<open>
    T_true(! _Chain_Is_empty( &fc.Free ), "progress_one_elem_in_queue");\<close>
*/
